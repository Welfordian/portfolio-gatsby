{"version":3,"file":"component---src-pages-login-js-40a6ba7d88c44e2d2f60.js","mappings":"8NAsCA,G,QApCMA,SAAAA,GACF,aAAe,IAAD,SACV,sBAEKC,MAAQ,CACTC,YAAaC,WAAWC,WAJlB,GADZJ,EAAAA,EAAAA,GAAAA,EAAAA,GAOD,kBA0BA,OA1BA,EAEDK,qBAAA,WACIC,aAAaC,KAAKN,MAAMC,cAC3B,EAEDM,mBAAA,SAAmBC,EAAWC,EAAWC,GAAW,IAAD,QACvB,IAApBJ,KAAKK,MAAMC,OAAoC,IAAnBJ,EAAUI,MACtCN,KAAKO,SAAU,CACXR,aAAcH,YAAW,WACrB,EAAKS,MAAMG,WACZ,SAGd,EAEDC,OAAA,WACI,OAAMT,KAAKK,MAAMC,KAKb,uBAAKI,UAAS,yEACRV,KAAKK,MAAMM,SALV,IAQd,EAjCClB,CAAqBmB,EAAAA,YCqE3B,EAjEMC,SAAAA,GACF,WAAYR,GAAQ,IAAD,SACf,cAAMA,IAAN,MAUJS,aAAe,SAAAC,GAAU,IAAD,EACpB,EAAKR,WAAL,MACKQ,EAAMC,OAAOC,MAAOF,EAAMC,OAAOE,MADtC,KAZe,EAiBnBC,aAAe,SAAAJ,GACXA,EAAMK,kBAENC,EAAAA,EAAAA,IAAY,EAAK3B,OAAO4B,MAAK,SAAAC,IACzBC,EAAAA,EAAAA,QAAgBC,OAAOC,SAASC,KAAO,kBACxCC,OAAM,SAAAL,GACL,EAAKhB,SAAS,CACVsB,SAAU,GACVC,SAAU,KAGd,EAAKvB,SAAS,CAAEwB,kBAAkB,EAAMC,oBAAqBT,EAAEU,YAzBnE,EAAKvC,MAAQ,CACTqC,kBAAkB,EAClBC,oBAAqB,GACrBH,SAAS,GACTC,SAAS,IAPE,EA8DlB,OA/DCjB,EAAAA,EAAAA,GAAAA,EAAAA,GAUD,YAsBDJ,OAAA,WAAU,IAAD,OAKL,OAJIyB,EAAAA,EAAAA,QACAV,EAAAA,EAAAA,QAAgBC,OAAOC,SAASC,KAAO,eAIvC,uBAAKjB,UAAS,uBACV,uBAAKA,UAAS,oFACV,gBAAC,EAAD,CAAcJ,KAAMN,KAAKN,MAAMqC,iBAAkBvB,OAAQ,kBAAM,EAAKD,SAAS,CAAEwB,kBAAkB,KAAUpB,QAASX,KAAKN,MAAMsC,sBAC/H,wBAAMtB,UAAS,sBAAyByB,OAAO,OAAOC,SAAU,SAAArB,GAAW,EAAKI,aAAaJ,KACzF,yBAAOL,UAAS,uBACR,wBAAMA,UAAS,WAAf,YAIJ,yBAAO2B,aAAY,MAASC,KAAK,OAAOrB,KAAK,WAAWC,MAAOlB,KAAKN,MAAMmC,SAAUU,SAAUvC,KAAKc,aAAcJ,UAAS,4HAG9H,yBAAOA,UAAS,uBACR,wBAAMA,UAAS,WAAf,YAIJ,yBAAO2B,aAAY,MAASC,KAAK,WAAWrB,KAAK,WAAWC,MAAOlB,KAAKN,MAAMoC,SAAUS,SAAUvC,KAAKc,aAAcJ,UAAS,4HAGlI,0BAAQA,UAAS,kDAAjB,cAKnB,EA/DCG,CAAcD,EAAAA","sources":["webpack://gatsby-starter-default/./src/components/Notification.js","webpack://gatsby-starter-default/./src/pages/login.js"],"sourcesContent":["import React from 'react';\n\nclass Notification extends React.Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            hideTimeout: setTimeout.prototype\n        }\n    }\n    \n    componentWillUnmount() {\n        clearTimeout(this.state.hideTimeout);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.show === true && prevProps.show === false) {\n            this.setState(({\n                clearTimeout: setTimeout(() => {\n                    this.props.onHide();\n                }, 4500)\n            }))\n        }\n    }\n\n    render () {\n        if (! this.props.show) {\n            return \"\";\n        }\n        \n        return (\n            <div className={`absolute top-0 right-0 bg-black px-4 py-3 shadow-lg text-white -mt-12`}>\n                { this.props.message }\n            </div>\n        )\n    }\n}\n\nexport default Notification","import React from \"react\"\nimport { navigate } from \"gatsby\"\nimport {handleLogin, isBrowser, isLoggedIn} from \"../services/auth\"\nimport Layout from \"../components/Layout\";\nimport Notification from \"../components/Notification\";\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showNotification: false,\n            notificationMessage: '',\n            username: ``,\n            password: ``,\n        }\n    }\n\n    handleUpdate = event => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    handleSubmit = event => {\n        event.preventDefault()\n\n        handleLogin(this.state).then(r => {\n            isBrowser() && (window.location.href = '/dashboard/')\n        }).catch(r => {\n            this.setState({\n                username: '',\n                password: ''\n            })\n\n            this.setState({ showNotification: true, notificationMessage: r.error });\n        })\n    }\n    render() {\n        if (isLoggedIn()) {\n            isBrowser() && (window.location.href = '/dashboard/')\n        }\n\n        return (\n            <div className={`flex justify-center`}>\n                <div className={`flex flex-col bg-black text-white w-1/2 p-12 shadow-2xl shadow-gray-700 relative`}>\n                    <Notification show={this.state.showNotification} onHide={() => this.setState({ showNotification: false })} message={this.state.notificationMessage}></Notification>\n                    <form className={`flex flex-col gap-6`} method=\"post\" onSubmit={event => { this.handleSubmit(event) }}>\n                        <label className={`flex flex-col gap-4`}>\n                                <span className={`text-xl`}>\n                                    Username\n                                </span>\n\n                            <input autoComplete={`off`} type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleUpdate} className={`focus:bg-gray-200 focus:text-black border-4 border-white bg-black text-white p-2 outline-none w-full pr-9 rounded-none`}/>\n                        </label>\n\n                        <label className={`flex flex-col gap-4`}>\n                                <span className={`text-xl`}>\n                                    Password\n                                </span>\n\n                            <input autoComplete={`off`} type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleUpdate} className={`focus:bg-gray-200 focus:text-black border-4 border-white bg-black text-white p-2 outline-none w-full pr-9 rounded-none`} />\n                        </label>\n\n                        <button className={`bg-white p-3 text-black mt-3 hover:bg-gray-300`}>Log In</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Login"],"names":["Notification","state","hideTimeout","setTimeout","prototype","componentWillUnmount","clearTimeout","this","componentDidUpdate","prevProps","prevState","snapshot","props","show","setState","onHide","render","className","message","React","Login","handleUpdate","event","target","name","value","handleSubmit","preventDefault","handleLogin","then","r","isBrowser","window","location","href","catch","username","password","showNotification","notificationMessage","error","isLoggedIn","method","onSubmit","autoComplete","type","onChange"],"sourceRoot":""}